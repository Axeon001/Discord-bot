import discord
import os
from discord.ext import commands
from motor.motor_asyncio import AsyncIOMotorClient
from flask import Flask
from threading import Thread

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)


@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


def run_flask():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    server_thread = Thread(target=run_flask)
    server_thread.start()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –±–æ—Ç–∞
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URL = "mongodb+srv://Axeon:erkosh2008kaldybek@limitlessrising.gtbj5.mongodb.net/?retryWrites=true&w=majority"
mongo_client = AsyncIOMotorClient(MONGO_URL)
db = mongo_client["discord_bot"]
collection = db["players"]


# –§–æ—Ä–º—É–ª—ã
def calculate_exp_for_level(level):
    if level <= 10:
        return level * 100
    elif level <= 20:
        return level * 200
    elif level <= 50:
        return level * 300
    return level * 500


def calculate_os(stats):
    return int((stats['strength'] * 2) + (stats['agility'] * 1.5) +
               (stats['durability'] * 1.5) + (stats['endurance'] * 1.2) +
               (stats['intellect'] * 1.8))


def determine_rank(total_stats):
    if total_stats >= 1001:
        return "S"
    elif total_stats >= 701:
        return "A"
    elif total_stats >= 501:
        return "B"
    elif total_stats >= 301:
        return "C"
    elif total_stats >= 151:
        return "D"
    elif total_stats >= 51:
        return "E"
    return "F"


# –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")


# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.command()
async def register(ctx):
    user_id = str(ctx.author.id)
    player = await collection.find_one({"_id": user_id})
    if player:
        await ctx.send(f"{ctx.author.mention}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await ctx.send(f"{ctx.author.mention}, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    try:
        name_msg = await bot.wait_for('message',
                                      timeout=30.0,
                                      check=lambda m: m.author == ctx.author)
        name = name_msg.content.strip()
    except:
        await ctx.send(
            f"{ctx.author.mention}, –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        return

    # –ó–∞–ø—Ä–æ—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    stats = {}
    for stat in [
            "strength", "agility", "durability", "endurance", "intellect"
    ]:
        await ctx.send(f"–í–≤–µ–¥–∏—Ç–µ {stat} (1-100):")
        try:
            msg = await bot.wait_for(
                'message',
                timeout=30.0,
                check=lambda m: m.author == ctx.author and m.content.isdigit())
            stats[stat] = min(100, max(1, int(
                msg.content)))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-100
        except:
            await ctx.send(
                f"{ctx.author.mention}, –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            return

    # –†–∞—Å—á—ë—Ç OS, —Ä–∞–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    total_stats = sum(stats.values())
    rank = determine_rank(total_stats)
    os = calculate_os(stats)

    player = {
        "_id": user_id,
        "name": name,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        "strength": stats["strength"],
        "agility": stats["agility"],
        "durability": stats["durability"],
        "endurance": stats["endurance"],
        "intellect": stats["intellect"],
        "level": 1,
        "exp": 0,
        "rank": rank,
        "os": os
    }

    await collection.insert_one(player)
    await ctx.send(embed=discord.Embed(
        title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        description=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **{name}**!\n–í–∞—à —Ä–∞–Ω–≥: {rank}",
        color=discord.Color.green()))


# –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫–∞
@bot.command()
async def interface(ctx):
    user_id = str(ctx.author.id)
    print(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")

    try:
        player = await collection.find_one({"_id": user_id})
        if not player:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await ctx.send("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"–ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫: {player}")

        # –°–æ–∑–¥–∞—ë–º embed —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞
        embed = discord.Embed(title=f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {player['name']}",
                              color=discord.Color.blue())
        embed.add_field(name="–§–∏–∑–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", value=player['strength'])
        embed.add_field(name="–õ–æ–≤–∫–æ—Å—Ç—å", value=player['agility'])
        embed.add_field(name="–ü—Ä–æ—á–Ω–æ—Å—Ç—å", value=player['durability'])
        embed.add_field(name="–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", value=player['endurance'])
        embed.add_field(name="–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", value=player['intellect'])
        embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=player['level'])
        embed.add_field(name="–û–ø—ã—Ç", value=player['exp'])
        embed.add_field(name="–†–∞–Ω–≥", value=player['rank'])
        embed.add_field(name="–û–±—â–∞—è —Å–∏–ª–∞ (OS)", value=player['os'])
        await ctx.send(embed=embed)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã interface: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")


# –ö–æ–º–∞–Ω–¥–∞ –ª–∏–¥–µ—Ä–æ–≤
@bot.command()
async def leaderboard(ctx):
    players = await collection.find().sort("os", -1).to_list(10)
    if not players:
        await ctx.send("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    embed = discord.Embed(title="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", color=discord.Color.gold())
    for index, player in enumerate(players):
        embed.add_field(name=f"{index + 1}. {player['name']}",
                        value=f"OS: {player['os']} | –†–∞–Ω–≥: {player['rank']}",
                        inline=False)
    await ctx.send(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@bot.command()
@commands.has_permissions(administrator=True)
async def add_exp(ctx, exp: int, member: discord.Member = None):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    if exp <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return

    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–¥–∞—ë–º –æ–ø—ã—Ç –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–º–∞–Ω–¥—É
    target = member if member else ctx.author
    user_id = str(target.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
    player = await collection.find_one({"_id": user_id})
    if not player:
        await ctx.send(f"{target.mention} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    new_exp = player["exp"] + exp
    level = player["level"]
    required_exp = calculate_exp_for_level(level)

    # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –æ–ø—ã—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π
    while new_exp >= required_exp:
        new_exp -= required_exp
        level += 1
        required_exp = calculate_exp_for_level(level)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await collection.update_one({"_id": user_id},
                                {"$set": {
                                    "exp": new_exp,
                                    "level": level
                                }})

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    await ctx.send(embed=discord.Embed(
        title="–û–ø—ã—Ç –¥–æ–±–∞–≤–ª–µ–Ω!",
        description=
        f"{target.mention} –ø–æ–ª—É—á–∏–ª {exp} –æ–ø—ã—Ç–∞!\n–¢–µ–ø–µ—Ä—å –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å: {level}\n–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {new_exp}",
        color=discord.Color.orange()))


# –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è OS
@bot.command()
async def update_os(ctx):
    user_id = str(ctx.author.id)
    player = await collection.find_one({"_id": user_id})
    if not player:
        await ctx.send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    os = calculate_os(player)
    rank = determine_rank(
        sum(player[key] for key in
            ["strength", "agility", "durability", "endurance", "intellect"]))
    await collection.update_one({"_id": user_id},
                                {"$set": {
                                    "os": os,
                                    "rank": rank
                                }})
    await ctx.send(
        embed=discord.Embed(title="OS –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                            description=f"–ù–æ–≤—ã–π OS: {os}\n–í–∞—à —Ä–∞–Ω–≥: {rank}",
                            color=discord.Color.purple()))


# –ö–æ–º–∞–Ω–¥–∞ reset: –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
@bot.command()
async def reset(ctx):
    user_id = str(ctx.author.id)
    player = await collection.find_one({"_id": user_id})
    if not player:
        await ctx.send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await collection.delete_one({"_id": user_id})
    await ctx.send(embed=discord.Embed(
        title="–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–±—Ä–æ—à–µ–Ω!",
        description=
        "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `!register`.",
        color=discord.Color.red()))


# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
@bot.command()
async def edit(ctx, stat: str, value: int):
    if stat not in [
            "strength", "agility", "durability", "endurance", "intellect"
    ]:
        await ctx.send(
            "–ù–µ–≤–µ—Ä–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑: strength, agility, durability, endurance, intellect."
        )
        return

    if not (1 <= value <= 100):
        await ctx.send("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 100.")
        return

    user_id = str(ctx.author.id)
    player = await collection.find_one({"_id": user_id})
    if not player:
        await ctx.send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await collection.update_one({"_id": user_id}, {"$set": {stat: value}})
    await ctx.send(embed=discord.Embed(
        title="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!",
        description=f"{stat.capitalize()} —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {value}.",
        color=discord.Color.green()))


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@bot.command()
async def help_commands(ctx):
    embed = discord.Embed(title="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                          color=discord.Color.blue())
    embed.add_field(
        name="!register",
        value="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.",
        inline=False)
    embed.add_field(
        name="!reset",
        value="–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        inline=False)
    embed.add_field(
        name="!interface",
        value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.",
        inline=False)
    embed.add_field(name="!leaderboard",
                    value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ OS (–æ–±—â–µ–π —Å–∏–ª–µ).",
                    inline=False)
    embed.add_field(
        name="!add_exp [—á–∏—Å–ª–æ]",
        value="–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É.",
        inline=False)
    embed.add_field(
        name="!update_os",
        value=
        "–û–±–Ω–æ–≤–ª—è–µ—Ç OS (–æ–±—â—É—é —Å–∏–ª—É) –∏ —Ä–∞–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.",
        inline=False)
    embed.add_field(
        name="!edit [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞] [–∑–Ω–∞—á–µ–Ω–∏–µ]",
        value="–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (strength, agility –∏ —Ç.–¥.).",
        inline=False)
    await ctx.send(embed=embed)


# –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
keep_alive()
                
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
from dotenv import load_dotenv
load_dotenv()
token = os.getenv("BOT_TOKEN")
bot.run(token)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
